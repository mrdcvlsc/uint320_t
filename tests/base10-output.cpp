#include <iostream>
#include <utility>
#include <vector>

#ifndef _MAKE_LIB
#include "../Header-Mode-uint320.hpp"
#else
#include <uint320.hpp>
#endif

using namespace rushed;

std::vector<bool> TEST_RESULTS;
const static std::string TEST_NAME = "uint320_t base10 output "; 

void ASSERT_STRING(const std::string& A, const std::string& B, const std::string& TEST_MESSAGE);


uint320_t fib(size_t nth) {
    uint320_t base0(0,0,0,0,0), base1(0,0,0,0,1);
    uint320_t nthfib(0,0,0,0,0);
    for(size_t i=2; i<=nth; ++i) {
        nthfib = base0 + base1;
        base0 = base1;
        base1 = nthfib;
    }
    return nthfib;
}

uint320_t fac(size_t n) {
    uint320_t factorial(1);
    uint320_t iter = factorial;

    for(size_t i=1; i<=n; ++i, iter++) {
        factorial = factorial * iter;
    }

    return factorial;
}

int main() {
    std::cout << "\n---------------------------------\n";
    std::cout << TEST_NAME << "\n=================================\n";

    // TEST VARIABLES
    std::string CFAC742 = "2676287753862856410657409333392170082849575986901630472812303892110759446834162177770245343348039279696121235402996257442898009435918478008543004551527250913031398562719767463339798655922055003279323319536102468582867985563482420656957432281081048461167940547023954699719026074487031193549156236045109683925566212072413016171704050574955312674293324752296194519192899501882118378141620175170572645280089697733041459858555313224981711086758353173421310544568501092188785428181275456143988490866833827577538870131581594997862082714403467843109270294058062618231848543301460126947964053709671871284002067484174675635993334649824290801737765023388226772643686016468144774141463401116823487004055239805953517998689177705575021130398679741872237276662976283454070421018403854281866712717832123300752183084181703919553991487623149343706001321292382628497414115817671893372395956566233112501139962050039182210946261159884869620761169299438311973602479944269334904857225316578562955911861752628257912180598853941490679126576655271963082406863007985299991041162983786881429496728452703947434216939790845583324790548267528896797917653213458120373502625488845366487414623981991298873868121719697572473459330360983827447470681390262573958459294840861827474541845159144543340225120246159160448293148125257287944895150507326759874141384208455808738565863299199164143068585707225859547460631513613662253264893833795735471666289659342567592314154375402493565289587446659469727992280875903975215544905032556244927970410112584071290719530966694122809514343778518276421378565106335372579286648395654199794360440528128609124754747549847893556854784000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    std::string CFAC77 = "145183092028285869634070784086308284983740379224208358846781574688061991349156420080065207861248000000000000000000";
    std::string CFAC250 = "3232856260909107732320814552024368470994843717673780666747942427112823747555111209488817915371028199450928507353189432926730931712808990822791030279071281921676527240189264733218041186261006832925365133678939089569935713530175040513178760077247933065402339006164825552248819436572586057399222641254832982204849137721776650641276858807153128978777672951913990844377478702589172973255150283241787320658188482062478582659808848825548800000000000000000000000000000000000000000000000000000000000000";
    std::string CFIB250 = "7896325826131730509282738943634332893686268675876375";

    std::string CONE = "1";
    std::string CZERO = "0";
    std::string CTEN = "10";
    std::string CO125 = "125";

    // ANSWERS
    std::string FAC742 = fac(742).toBase10String();
    std::string FAC77 = fac(77).toBase10String();
    std::string FAC250 = fac(250).toBase10String();
    std::string FIB250 = uint320_t(0,0,0x151ae2a8207e, 0xf4425d98671de203, 0xbfb894e8f601e617).toBase10String();

    std::string ONE = uint320_t(1).toBase10String();
    std::string ZERO = uint320_t(0).toBase10String();
    std::string TEN = uint320_t(10).toBase10String();
    std::string O125 = uint320_t(125).toBase10String();

    // 145183092028285869634070784086308284983740379224208358846781574688061991349156420080065207861248000000000000000000

    std::cout << FAC77 << "\n";

    // TESTING ANSWER
    ASSERT_STRING(CFAC742,FAC742,"FAC742");
    ASSERT_STRING(CFAC77,FAC77,"FAC77");
    ASSERT_STRING(CFAC250,FAC250,"FAC250");
    ASSERT_STRING(CFIB250,FIB250,"FIB250");

    ASSERT_STRING(CONE,ONE,"ONE");
    ASSERT_STRING(CZERO,ZERO,"ZERO");
    ASSERT_STRING(CTEN,TEN,"TEN");
    ASSERT_STRING(CO125,O125,"125");

    // SUMMARY OF RESULTS 
    size_t failed_cnt = 0; 
    for(auto e : TEST_RESULTS) {     
        if(!e) failed_cnt++;
    }

    if(TEST_RESULTS.size()) {
        std::cout << "---------------------------------\n";
        std::cout << TEST_NAME << " RESULT:" << "\n";
        if(!failed_cnt) {
            std::cout << "\tALL test PASSED\n";
            std::cout << "---------------------------------\n";
            return 0;
        }
        else {
            std::cout << "\tSOME test FAILED\n";
            std::cout << "---------------------------------\n";
            return 1;
        }
    }
}


void ASSERT_STRING(const std::string& A, const std::string& B, const std::string& TEST_MESSAGE) {
    std::cout << TEST_NAME << ":" << TEST_MESSAGE << " : ";
    if(A!=B) {
        std::cout << "FAILED\n";
        TEST_RESULTS.push_back(false);
    }
    else {
        std::cout << "PASSED\n";
        TEST_RESULTS.push_back(true);
    }
}